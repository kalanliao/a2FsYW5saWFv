{"meta":{"title":"Kalan","subtitle":null,"description":null,"author":"Kalan","url":"https://kalanliao.github.io","root":"/"},"pages":[],"posts":[{"title":"javascript学习-01(Console)","slug":"javascript-study-01","date":"2019-09-17T06:55:49.000Z","updated":"2019-09-17T08:24:18.628Z","comments":true,"path":"2019/09/17/javascript-study-01/","link":"","permalink":"https://kalanliao.github.io/2019/09/17/javascript-study-01/","excerpt":"","text":"Console我们经常会在浏览器中使用console.log来进行调试和参数的输出查看，但是console其实是一个非常丰富的封装，其中还有很多的方法，今天就来介绍一下。首先，我们先看一下console的代码 下面就介绍一下，我们会用到的可以提高我们开发效率，调试效率的方法。 console.log()123456//平时我们使用的时候会这样console.log(\"测试内容不要当真\");//或者这样console.log(1,2,3,4)//或者这样console.log(&#123;name:1&#125;) 上面我们使用的格式为console.log(object),console.log(object, otherObject, string)除了这些基础用法还有比较好玩的用法console.log(msg, values),这个格式的用法有点像C++的printf,C#的Console.Write()等那么我们来看看怎么使用 12345//首先我们使用了3种占位符console.log(\"我今天吃了%o,你吃了%d顿,你叫%s.\", \"Skittles\", 22,\"Kalan\");//%o的复杂传值console.log(\"abc %o\",&#123;name:1&#125;) 我们看一下效果可以看到%o这个是对象占位符,%s这个是字符串占位符,%d这个是数字占位符 下面我们讲解一个更好玩的占位符%c，先上代码 1234console.log( \"我爱你 %c路西\" one day, \"color: Red; background-color: orange; padding: 2px 5px; border-radius: 2px\"); 看到这里，应该明白，这个占位符当你使用之后，后面所有的文字都将根据此CSS渲染%o除外 console.dir()123//直接上例子console.dir(document.getElementsByClassName(\"full\")[0])console.log(document.getElementsByClassName(\"full\")[0]) 我们看到结果console.log直接输出的html，而console.dir输出的是DOM结构树对象 console.warn()这个函数直接会输出一个警告框，可以定位到输出位置 console.table()这个函数能更好的显示列表型数据，我们用console.log显示对比一下 12console.table([1,2,3],[2,3,4])console.table(&#123;name:1,age:2&#125;,&#123;name:11,age:22&#125;,&#123;name:11,age:22&#125;) console.assert() 可以传递2个参数：如果为false会输出Assertion failed和第二个参数（如上图所示） console.countcount只是作为一个计数器，或者作为一个命名计数器，可以统计代码被执行的次数。 1234567891011for (let i = 0; i &lt; 10000; i++) &#123; if (i % 2) &#123; console.count(\"odds\"); &#125; if (!(i % 5)) &#123; console.count(\"multiplesOfFive\"); &#125; if (isPrime(i)) &#123; console.count(\"prime\"); &#125;&#125; console.trace()trace 可以调试模块之间的调用 1234567891011export default class CupcakeService &#123; constructor(dataLib) &#123; this.dataLib = dataLib; if(typeof dataLib !== 'object') &#123; console.log(dataLib); console.trace(); &#125; &#125; ...&#125; 这里使用 console.log()仅告诉我们传递数据dataLib是什么 ，而没有具体的传递的路径。不过，console.trace()会非常清楚地告诉我们问题出在 Dashboard.js，我们可以看到是 new CupcakeService(false)导致错误。 console.time()console.time() 是一个用于跟踪操作时间的专用函数，它是跟踪 JavaScript 执行时间的好方法。 123456789101112131415function slowFunction(number) &#123; var functionTimerStart = new Date().getTime(); // something slow or complex with the numbers. // Factorials, or whatever. var functionTime = new Date().getTime() - functionTimerStart; console.log(`Function time: $&#123;functionTime&#125;`);&#125;var start = new Date().getTime();for (i = 0; i &lt; 100000; ++i) &#123; slowFunction(i);&#125;var time = new Date().getTime() - start;console.log(`Execution time: $&#123;time&#125;`); 这是一种老派的做法，我们使用 console.time()来简化以上代码。 123456789101112const slowFunction = number =&gt; &#123; console.time(\"slowFunction\"); // something slow or complex with the numbers. // Factorials, or whatever. console.timeEnd(\"slowFunction\");&#125;;console.time();for (i = 0; i &lt; 100000; ++i) &#123; slowFunction(i);&#125;console.timeEnd(); console.group()12345678910111213// this is the global scopelet number = 1;console.group(\"OutsideLoop\");console.log(number);console.group(\"Loop\");for (let i = 0; i &lt; 5; i++) &#123; number = i + number; console.log(number);&#125;console.groupEnd();console.log(number);console.groupEnd();console.log(\"All done now\"); 输出如下： 123456789101112131415161718class MyClass &#123; constructor(dataAccess) &#123; console.group(\"Constructor\"); console.log(\"Constructor executed\"); console.assert( typeof dataAccess === \"object\", \"Potentially incorrect dataAccess object\" ); this.initializeEvents(); console.groupEnd(); &#125; initializeEvents() &#123; console.group(\"events\"); console.log(\"Initialising events\"); console.groupEnd(); &#125;&#125;let myClass = new MyClass(false);","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kalanliao.github.io/categories/JavaScript/"}],"tags":[{"name":"js","slug":"js","permalink":"https://kalanliao.github.io/tags/js/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-09-17T03:13:05.858Z","updated":"2019-09-17T05:38:34.554Z","comments":true,"path":"2019/09/17/hello-world/","link":"","permalink":"https://kalanliao.github.io/2019/09/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"测试","slug":"测试","permalink":"https://kalanliao.github.io/categories/测试/"}],"tags":[]}]}