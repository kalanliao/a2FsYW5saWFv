{"meta":{"title":"Kalan","subtitle":null,"description":null,"author":"Kalan","url":"https://kalanliao.github.io","root":"/"},"pages":[],"posts":[{"title":"netcore3.0_enum_flagsattr","slug":"netcore/netcore3-0-enum-flagsattr","date":"2019-09-23T01:53:03.000Z","updated":"2019-09-23T01:56:29.232Z","comments":true,"path":"2019/09/23/netcore/netcore3-0-enum-flagsattr/","link":"","permalink":"https://kalanliao.github.io/2019/09/23/netcore/netcore3-0-enum-flagsattr/","excerpt":"","text":"应用Enum的FlagsAttribute标签能做很多应用，可以使枚举获得多个判断的效果下面这段代码： 1234567891011[Flags] enum WeekDays &#123; Monday = 0x1, Tuesday = 0x2, Wednesday = 0x4, Thursday = 0x8, Friday = 0x10, Saturday = 0x20, Sunday = 0x40 &#125; 同样的我们也可以这么写 1234567891011[Flags] public enum WeekDays &#123; Monday = 1, Tuesday = 2, Wednesday = 4, Thursday = 8, Friday = 16, Saturday = 32, Sunday = 64 &#125; 这里会用到我们位运算的特性 123456789101112131415161718192021222324WeekDays wds = WeekDays.Monday | WeekDays.Sunday | WeekDays.Tuesday;/* 我们来看看计算过程: * 或运算: 0000 0001 --星期一 0x1 或 0010 0000 --星期六 0x20 或 0000 0010 --星期二 0x2 = 0010 0011 = 35 *换句话说: 某个位是1就代表了这个位上的值在枚举中存在 */Console.WriteLine(&quot;这3天组合Int为: &quot; + (int)wds);/*利用上面规则来判断枚举值中是否包含某个枚举值就轻而易举*/if ((wds &amp; WeekDays.Monday) != 0) Console.WriteLine(&quot;星期一是其中一天&quot;);if ((wds &amp; WeekDays.Saturday) == 0) Console.WriteLine(&quot;星期六不是其中一天&quot;);//(补充)如果将某个值去掉的话可以按照原来采用这次方式/* 将星期六从枚举变量中去掉 * 0010 0011 * &amp;1011 1111 (~WeekDays.Monday)取反 * =0000 0011 这样就把星期一去掉啦!*/wds = wds &amp; (~WeekDays.Monday);Console.WriteLine(&quot;去掉星期一后的效果: &quot; + wds); 到这里我们看到可以联想到可以用这个枚举来做一些简单的页面权限的判断比如我们有下面这些权限 12345678910111213141516171819202122[Flags]public enum Permissions&#123; [Description(&quot;未設定&quot;)] None = 0, [Description(&quot;建立&quot;)] Create = 1, [Description(&quot;讀取&quot;)] Read = 2, [Description(&quot;更新&quot;)] Update = 4, [Description(&quot;刪除&quot;)] Delete = 8, [Description(&quot;所有功能&quot;)] All = Create | Read | Update | Delete&#125; 通过下面的判断方法来进行权限判断 1234567891011Permissions permission = Permissions.None;permission = permission | Permissions.Create;MessageBox.Show(permission.ToString());// Result: Createpermission = permission | Permissions.Read;permission = permission | Permissions.Update;MessageBox.Show(permission.ToString());// Result: Create, Read, Updatepermission = (permission &amp; (Permissions.All ^ Permissions.Read));MessageBox.Show(permission.ToString());// Result: Create, Update","categories":[{"name":".NetCore","slug":"NetCore","permalink":"https://kalanliao.github.io/categories/NetCore/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://kalanliao.github.io/tags/C/"},{"name":"NetCore","slug":"NetCore","permalink":"https://kalanliao.github.io/tags/NetCore/"}]},{"title":"马云离职语录","slug":"creed/Jack-Ma01","date":"2019-09-19T07:58:31.000Z","updated":"2019-09-19T08:11:09.149Z","comments":true,"path":"2019/09/19/creed/Jack-Ma01/","link":"","permalink":"https://kalanliao.github.io/2019/09/19/creed/Jack-Ma01/","excerpt":"","text":"马云：我最遗憾的错误01年，我犯了一个错误，我告诉我的18位共同创业同仁，他们只能做小组经理，而所有的副总裁都得从外面聘请。现在十年过去了，我从外面聘请的人才都走了，而我之前曾怀疑过其能力的人都成了副总或董事。我相信两个信条：态度比能力重要，选择同样也比能力重要！ 马云：不能统一人的思想，但可以统一人的目标千万不要相信你能统一人的思想，那是不可能的。30%的人永远不可能相信你，不要让你的同事为你干活，而让他们为我们的共同目标干活。团结在一个共同的目标下，要比团结在一个人周围容易的多。 马云提醒：细节好的人格局一般都差 有人觉得我牛，6分钟说服了孙正义，其实是他说服了我。见孙正义之前，我在硅谷至少被拒绝了40次。 做企业赢在细节，输在格局。 格局，“格”是人格，“局”是胸怀，细节好的人格局一般都差，格局好的人从来不重细节，两个都干好，那叫太有才！ 马云：领导比员工多什么？领导永远不要跟下属比技能，下属肯定比你强；如果不比你强，说明你请错人了。 要比眼光：比他看得远； 要比胸怀：领导的胸怀是委屈撑大的，要能容人所不容； 要比实力：抗失败的能力比他强；一个优秀的领导人的素质就是眼光、胸怀和实力。 马云：中国商人千万别在“红道”上混 人一辈子要明白钱和权两个东西是绝对不要碰在一起，当了官永远不要想有钱，当了商人千万别想权； 钱和权这两个东西碰在一起就是炸药和雷管碰在一起，必然要爆炸； 胡雪岩的悲哀就在于他是红顶商人；④中国商人千万别在“红道”上混。 马云：年轻人必须思考的4大问题 什么是失败？放弃就是最大的失败。 什么叫坚强？经历许多磨难、委屈、不爽，你才知道什么叫坚强。 你的职责是什么？比别人多勤奋一点、多努力一点、多一点理想，这就是你的职责。 傻瓜用嘴讲话，聪明人用脑袋讲话，智者用心讲话。 马云：人生在世在做人，不是做事我跟自己讲我们到这个世界上不是来工作的，我们是来享受人生的，我们是来做人不是做事。 如果一辈子都做事的话，忘了做人，将来一定会后悔。 不管事业多成功、多伟大、多了不起，记住我们到这个世界就是享受经历这个人生的体验。 忙着做事一定会后悔。 马云：高手的竞争论 一定要争得你死我活的商战，是最愚蠢的。 眼睛中全是敌人，外面就全是敌人。 竞争的时候不要带仇恨，带仇恨一定失败。 竞争乐趣就像下棋一样，你输了，我们再来过，两个棋手不能打架。 真正做企业是没有仇人的，心中无敌，天下无敌。 马云：别把抱怨当习惯人是退化最严重的动物。跟兽比人很“弱肢”，和狗比人很“闻盲”，但人类“进化”了抱怨。 偶尔为之无大碍，但当抱怨成习惯，就如喝海水，喝的越多渴得越厉害。 最后发现，走在成功路上的，都是些不抱怨的“傻子们”。 世界不会记得你说了什么，但一定不会忘记你做了什么！ 马云给初创企业者的忠告 大家看不清的机会，才是真正的机会。 让员工笑着干活。 客户第一、员工第二、股东第三。 抢在变化之前先变。 忘掉money，忘掉赚钱。 小聪明不如傻坚持。 心态决定姿态，姿态决定状态。 马云谈创业 一个好的东西往往是说不清楚的，说得清楚的往往不是好东西！ 创业要找最合适的人，不一定要找最成功的人。 这世界最不可靠的东西就是关系。 免费是世界上最昂贵的东西。 今天很残酷，明天更残酷，后天很美好。 马云“四不”创业智慧 创业最怕就是看不见，看不起，看不懂，跟不上； 看不见对手在哪里，看不起对手，看不懂对手为什么可以变得那么强，然后就跟不上了； 即使对手很弱小，也一定要把对方看的很强大，即使对手很强大，也不一定要把自己看的很弱小。 马云当你决定要创业时便意味着： 没有了稳定的收入；②没有了请假的权利；③没有了得红包的机会。 然而却更意味着： 收入不再受限制；②时间运用更有效；③手心向下不求人。 想法若不同，结果便不同；选择不一样，生活才变样。 马云谈机会如果一个方案有90%的人说“好”的话，我一定要把它扔到垃圾桶里去。 因为这么多人说好的方案，必然有很多人在做了，机会肯定不会是我们的了。","categories":[{"name":"信条","slug":"信条","permalink":"https://kalanliao.github.io/categories/信条/"}],"tags":[{"name":"马云,Jack MA","slug":"马云-Jack-MA","permalink":"https://kalanliao.github.io/tags/马云-Jack-MA/"}]},{"title":".NET Core 3.0 可回收程序集加载上下文","slug":"netcore/netcore3-0-context-gc","date":"2019-09-19T02:12:16.000Z","updated":"2019-09-19T02:16:27.611Z","comments":true,"path":"2019/09/19/netcore/netcore3-0-context-gc/","link":"","permalink":"https://kalanliao.github.io/2019/09/19/netcore/netcore3-0-context-gc/","excerpt":"","text":"前世今生.NET诞生以来，程序集的动态加载和卸载都是一个Hack的技术，之前的NetFx都是使用AppDomain的方式去加载程序集，然而AppDomain并没有提供直接卸载一个程序集的API，而是要卸载整个AppDomain才能卸载包含在其中的所有程序集。然而卸载整个CurrentAppDomain会使程序不能工作。 可能有人另辟西经，创建别一个AppDomain来加载/卸载程序集，但是由于程序集之间是不能跨域访问的，也导致只能通过Remote Proxy的方式去访问，这样在类型创建和使用上带来了一定的难度也是类型的继承变得相当复杂。 .NET Core中一直没有AppDomain的支持。但是在.NET Core 3.0中，我最期待的一个特性就是对可收集程序集的支持(Collectible AssemblyLoadContext)。 众所周知.NET Core中一直使用AssemblyLoadContext的API，来进行程序集的动态加载，但是并没有提供Unload的方法，此次升级更新了这方面的能力。 AssemblyLoadContext其实这次AssemblyLoadContext的设计，我认为更像是Java中ClassLoader的翻版，可以说非常类似。在使用过程中自定义AssemblyLoadContext可以内部管理其中的程序集，并对整体Context进行Unload。使用AssemblyLoadContext也可以避免程序集名称和版本的冲突。 Getting Started.NET Core 3.0还没有正式版，所有要使用预览版的SDK完成以下实例。我使用的是.NET Core SDK 3.0.100-preview-009812 dotnet new globaljson --sdk-version 3.0.100-preview-009812 AssemblyLoadContext是一个抽象类的，我们需要子类化。下面显示的是我们创建自定义AssemblyLoadContext的方法,实现一个可回收的Context需要在构造器中指定isCollectible: true ： 123456789public class CollectibleAssemblyLoadContext : AssemblyLoadContext&#123; public CollectibleAssemblyLoadContext() : base(isCollectible: true) &#123; &#125; protected override Assembly Load(AssemblyName assemblyName) &#123; return null; &#125;&#125; 使用netstandard2.0创建一个library 1234567891011using System;namespace SampleLibrary&#123; public class SayHello &#123; public void Hello(int iteration) &#123; Console.WriteLine($\"Hello &#123;iteration&#125;!\"); &#125; &#125;&#125; 测试Load/Unload 12345678910111213var context = new CollectibleAssemblyLoadContext();var assemblyPath = Path.Combine(Directory.GetCurrentDirectory(),\"SampleLibrary.dll\");using (var fs = new FileStream(assemblyPath, FileMode.Open, FileAccess.Read))&#123; var assembly = context.LoadFromStream(fs); var type = assembly.GetType(\"SampleLibrary.SayHello\"); var greetMethod = type.GetMethod(\"Hello\"); var instance = Activator.CreateInstance(type); greetMethod.Invoke(instance, new object[] &#123; i &#125;);&#125;context.Unload();GC.Collect();GC.WaitForPendingFinalizers(); 当执行GC收回后，加载的程序集会被完全的回收。","categories":[{"name":".NetCore","slug":"NetCore","permalink":"https://kalanliao.github.io/categories/NetCore/"}],"tags":[{"name":"C#,.netcore,.netcore3.0","slug":"C-netcore-netcore3-0","permalink":"https://kalanliao.github.io/tags/C-netcore-netcore3-0/"}]},{"title":"正则大全收藏","slug":"collect/regex","date":"2019-09-18T03:01:34.000Z","updated":"2019-09-18T03:08:06.701Z","comments":true,"path":"2019/09/18/collect/regex/","link":"","permalink":"https://kalanliao.github.io/2019/09/18/collect/regex/","excerpt":"","text":"校验数字的表达式123456789101112131415161718192021222324252627282930313233343536371 数字：^[0-9]*$2 n位的数字：^\\d&#123;n&#125;$3 至少n位的数字：^\\d&#123;n,&#125;$4 m-n位的数字：^\\d&#123;m,n&#125;$5 零和非零开头的数字：^(0|[1-9][0-9]*)$6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$7 带1-2位小数的正数或负数：^(-)?\\d+(.\\d&#123;1,2&#125;)?$8 正数、负数、和小数：^(-|+)?\\d+(.\\d+)?$9 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$10 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$11 非零的正整数：^[1-9]\\d$ 或 ^([1-9][0-9])&#123;1,3&#125;$ 或 ^+?[1-9][0-9]*$12 非零的负整数：^-[1-9][]0-9&quot;$ 或 ^-[1-9]\\d$13 非负整数：^\\d+$ 或 ^[1-9]\\d*|0$14 非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$15 非负浮点数：^\\d+(.\\d+)?$ 或 ^[1-9]\\d.\\d|0.\\d[1-9]\\d|0?.0+|0$16 非正浮点数：^((-\\d+(.\\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\\d.\\d|0.\\d[1-9]\\d))|0?.0+|0$17 正浮点数：^[1-9]\\d.\\d|0.\\d[1-9]\\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$18 负浮点数：^-([1-9]\\d.\\d|0.\\d[1-9]\\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$19 浮点数：^(-?\\d+)(.\\d+)?$ 或 ^-?([1-9]\\d.\\d|0.\\d[1-9]\\d|0?.0+|0)$ 校验字符的表达式12345678910111213141516171819202122231 汉字：^[\\u4e00-\\u9fa5]&#123;0,&#125;$2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$3 长度为3-20的所有字符：^.&#123;3,20&#125;$4 由26个英文字母组成的字符串：^[A-Za-z]+$5 由26个大写英文字母组成的字符串：^[A-Z]+$6 由26个小写英文字母组成的字符串：^[a-z]+$7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$8 由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;3,20&#125;$9 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$10 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]&#123;2,20&#125;$11 可以输入含有^%&amp;&apos;,;=?$\\&quot;等字符：[^%&amp;&apos;,;=?$\\x22]+12 禁止输入含有~的字符：[^~\\x22]+ 特殊需求表达式1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465661 Email地址：^\\w+([-+.]\\w+)@\\w+([-.]\\w+).\\w+([-.]\\w+)*$2 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?3 InternetURL：[a-zA-z]+://[^\\s] 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=])?$4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$5 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^((\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$6 国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;7 身份证号(15位、18位数字)：^\\d&#123;15&#125;|\\d&#123;18&#125;$8 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.\\d)(?=.[a-z])(?=.*[A-Z]).&#123;8,10&#125;$12 日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$15 钱的输入格式：16 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$20 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$24 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$26 中文字符的正则表达式：[\\u4e00-\\u9fa5]27 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))28 空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)29 HTML标记的正则表达式：&lt;(\\S?)[^&gt;]&gt;.?&lt;/\\1&gt;|&lt;.? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)30 首尾空白字符的正则表达式：^\\s|\\s$或(^\\s)|(\\s$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)31 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)32 中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)33 IP地址：\\d+.\\d+.\\d+.\\d+ (提取IP地址时有用)34 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))","categories":[{"name":"Collect","slug":"Collect","permalink":"https://kalanliao.github.io/categories/Collect/"}],"tags":[{"name":"regex","slug":"regex","permalink":"https://kalanliao.github.io/tags/regex/"}]},{"title":"javascript学习-02(跨域原理)","slug":"javascript/javascript-study-02","date":"2019-09-18T01:55:49.000Z","updated":"2019-09-20T08:01:09.431Z","comments":true,"path":"2019/09/18/javascript/javascript-study-02/","link":"","permalink":"https://kalanliao.github.io/2019/09/18/javascript/javascript-study-02/","excerpt":"","text":"跨域请求的含义浏览器的同源策略，出于防范跨站脚本的攻击，禁止客户端脚本（如 JavaScript）对不同域的服务进行跨站调用。 一般的，只要网站的 协议名protocol、 主机host、 端口号port 这三个中的任意一个不同，网站间的数据请求与传输便构成了跨域调用。这也是我们下面实践的理论基础。我们利用 NodeJs 创建了两个服务器，分别监听 3000、 3001 端口（下面简称 服务器3000 与 服务器3001 ），由于端口号不一样，这两个服务器以及服务器上页面通信构成了跨域请求。 在服务器3000 有一个登录页面，页面的请求代码是这样的 12345678910111213141516171819202122$(function() &#123; $(\"#submit\").click(function() &#123; var data = &#123; name: $(\"#name\").val(), id: $(\"#id\").val() &#125;; $.ajax(&#123; type: 'POST', data: data, url: 'http://localhost:3000/ajax/deal', dataType: 'json', cache: false, timeout: 5000, success: function(data) &#123; console.log(data) &#125;, error: function(jqXHR, textStatus, errorThrown) &#123; console.log('error ' + textStatus + ' ' + errorThrown); &#125; &#125;); &#125;);&#125;); 处理函数为： 123456789pp.post('/ajax/deal', function(req, res) &#123; console.log(\"server accept: \", req.body.name, req.body.id) var data = &#123; name: req.body.name + ' - server 3000 process', id: req.body.id + ' - server 3000 process' &#125; res.send(data) res.end()&#125;) 结果为：此处数据处理成功。 由于数据请求一般都是由页面发送数据字段，服务器根据这些字段作相应的处理，如数据库查询，字符串操作等等。所以我们这里简单的处理数据（在数据后面加上字符串‘server 3000 process’），并且返回给浏览器，表示数据经过服务器端处理。如果让 服务器3000 上的页面向 服务器 3001 发起请求会怎样呢？ 将请求页面中的 ajax 请求路径改为： 12345$.ajax(&#123; ... url: 'http://localhost:3001/ajax/deal', ...&#125;); 服务器3001 对应的处理函数与 服务器3000 类似： 123456789app.post('/ajax/deal', function(req, res) &#123; console.log(\"server accept: \", req.body.name, req.body.id) var data = &#123; name: req.body.name + ' - server 3001 process', id: req.body.id + ' - server 3001 process' &#125; res.send(data) res.end()&#125;) 结果证明了我们上面所说的端口号不同，发生了跨域请求的调用。 需要注意的是，服务器 3001 控制台有输出： server accept: chiaki 3001这说明跨域请求并非是浏览器限制了发起跨站请求，而是请求可以正常发起，到达服务器端，但是服务器返回的结果会被浏览器拦截。 利用 JSONP 实现跨域调用说道跨域调用，可能大家首先想到的或者听说过的就是 JSONP 了。 什么是JSONP来看一下原文 JSONP (JSON with Padding or JSON-P) is a JSON extension used by web developers to overcome the cross-domain restrictions imposed by browsers’ same-origin policy that limits access to resources retrieved from origins other than the one the page was served by. In layman’s terms, one website cannot just simply access the data from another website. It was developed because handling a browsers’ same origin policy can be difficult, so using JSONP abstracts the difficulties and makes it easier. JSON stands for “JavaScript Object Notation”, a format by which object fields are represented as key-value pairs which is used to represent data.JSONP 是 JSON 的一种使用模式，可以解决主流浏览器的跨域数据访问问题。其原理是根据 XmlHttpRequest 对象受到同源策略的影响，而 &lt;script&gt; 标签元素却不受同源策略影响，可以加载跨域服务器上的脚本，网页可以从其他来源动态产生 JSON 资料。用 JSONP 获取的不是 JSON 数据，而是可以直接运行的 JavaScript 语句。 使用 jQuery 集成的 $.ajax 实现 JSONP 跨域调用我们先从简单的实现开始，利用 jQuery 中的 $.ajax 来实现上诉的跨域调用。 依然是上面的例子，我们将 服务器 3000 上的请求页面的 JavaScript 代码改为： 123456789101112131415161718192021222324252627// 回调函数function jsonpCallback(data) &#123; console.log(\"jsonpCallback: \" + data.name)&#125;$(\"#submit\").click(function() &#123; var data = &#123; name: $(\"#name\").val(), id: $(\"#id\").val() &#125;; $.ajax(&#123; url: 'http://localhost:3001/ajax/deal', data: data, dataType: 'jsonp', cache: false, timeout: 5000, // jsonp 字段含义为服务器通过什么字段获取回调函数的名称 jsonp: 'callback', // 声明本地回调函数的名称，jquery 默认随机生成一个函数名称 jsonpCallback: 'jsonpCallback', success: function(data) &#123; console.log(\"ajax success callback: \" + data.name) &#125;, error: function(jqXHR, textStatus, errorThrown) &#123; console.log(textStatus + ' ' + errorThrown); &#125; &#125;);&#125;); 服务器 3001 上对应的处理函数为： 123456789app.get('/ajax/deal', function(req, res) &#123; console.log(\"server accept: \", req.query.name, req.query.id) var data = \"&#123;\" + \"name:'\" + req.query.name + \" - server 3001 process',\" + \"id:'\" + req.query.id + \" - server 3001 process'\" + \"&#125;\" var callback = req.query.callback var jsonp = callback + '(' + data + ')' console.log(jsonp) res.send(jsonp) res.end()&#125;) 这里一定要注意 data 中字符串拼接，不能直接将 JSON 格式的 data 直接传给回调函数，否则会发生编译错误： parsererror Error: jsonpCallback was not called。 其实脑海里应该有一个概念：利用 JSONP 格式返回的值一段要立即执行的 JavaScript 代码，所以不会像 ajax 的 XmlHttpRequest 那样可以监听不同事件对数据进行不同处理。 处理结果如下所示： 使用 &lt;script&gt; 标签原生实现 JSONP经过上面的事件，你是不是觉得 JSONP 的实现和 Ajax 大同小异？ 其实，由于实现的原理不同，由 JSONP 实现的跨域调用不是通过 XmlHttpRequset 对象，而是通过 script 标签，所以在实现原理上，JSONP 和 Ajax 已经一点关系都没有了。看上去形式相似只是由于 jQuery 对 JSONP 做了封装和转换。 比如在上面的例子中，我们假设要传输的数据 data 格式如下： 1234&#123; name: \"chiaki\", id\": \"3001\"&#125; 那么数据是如何传输的呢？HTTP 请求头的第一行如下： GET /ajax/deal?callback=jsonpCallback&amp;name=chiaki&amp;id=3001&amp;_=1473164876032 HTTP/1.1 可见，即使形式上是用 POST 传输一个 JSON 格式的数据，其实发送请求时还是转换成 GET 请求。 其实如果理解 JSONP 的原理的话就不难理解为什么只能使用 GET 请求方法了。由于是通过 script 标签进行请求，所以上述传输过程根本上是以下的形式： &lt;script src = &#39;http://localhost:3001/ajax/deal?callback=jsonpCallback&amp;name=chiaki&amp;id=3001&amp;_=1473164876032&#39;&gt;&lt;/script&gt; 这样从服务器返回的代码就可以直接在这个 script 标签中运行了。下面我们自己实现一个 JSONP： 服务器 3000请求页面的 JavaScript 代码中，只有回调函数 jsonpCallback： 123function jsonpCallback(data) &#123; console.log(\"jsonpCallback: \"+data.name)&#125; 服务器 3000请求页面还包含一个 script 标签： &lt;script src = &#39;http://localhost:3001/jsonServerResponse?jsonp=jsonpCallback&#39;&gt;&lt;/script&gt; 服务器 3001上对应的处理函数： 123456789app.get('/jsonServerResponse', function(req, res) &#123; var cb = req.query.jsonp console.log(cb) var data = 'var data = &#123;' + 'name: $(\"#name\").val() + \" - server 3001 jsonp process\",' + 'id: $(\"#id\").val() + \" - server 3001 jsonp process\"' + '&#125;;' var debug = 'console.log(data);' var callback = '$(\"#submit\").click(function() &#123;' + data + cb + '(data);' + debug + '&#125;);' res.send(callback) res.end()&#125;) 与上面一样，我们在所获取的参数后面加上 “ – server 3001 jsonp process” 代表服务器对数据的操作。从代码中我么可以看到，处理函数除了根据参数做相应的处理，更多的也是进行字符串的拼接。 最终的结果为： JSONP 总结至此，我们了解了 JSONP 的原理以及实现方式，它帮我们实现前端跨域请求，但是在实践的过程中，我们还是可以发现它的不足： 只能使用 GET 方法发起请求，这是由于 script 标签自身的限制决定的。不能很好的发现错误，并进行处理。与 Ajax 对比，由于不是通过 XmlHttpRequest 进行传输，所以不能注册 success、 error 等事件监听函数。 使用 CORS 实现跨域调用什么是 CORS？Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，是 JSONP 模式的现代版。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。用 CORS 可以让网页设计师用一般的 XMLHttpRequest，这种方式的错误处理比 JSONP 要来的好。另一方面，JSONP 可以在不支持 CORS 的老旧浏览器上运作。现代的浏览器都支持 CORS。 CORS 的实现还是以 服务器 3000 上的请求页面向 服务器 3001 发送请求为例。 服务器 3000 上的请求页面 JavaScript 不变，如下： 12345678910111213141516171819202122$(function() &#123; $(\"#submit\").click(function() &#123; var data = &#123; name: $(\"#name\").val(), id: $(\"#id\").val() &#125;; $.ajax(&#123; type: 'POST', data: data, url: 'http://localhost:3001/cors', dataType: 'json', cache: false, timeout: 5000, success: function(data) &#123; console.log(data) &#125;, error: function(jqXHR, textStatus, errorThrown) &#123; console.log('error ' + textStatus + ' ' + errorThrown); &#125; &#125;); &#125;);&#125;); 服务器 3001上对应的处理函数： 1234567891011121314app.post('/cors', function(req, res) &#123; res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\"); res.header(\"Access-Control-Allow-Methods\", \"PUT,POST,GET,DELETE,OPTIONS\"); res.header(\"X-Powered-By\", ' 3.2.1') res.header(\"Content-Type\", \"application/json;charset=utf-8\"); var data = &#123; name: req.body.name + ' - server 3001 cors process', id: req.body.id + ' - server 3001 cors process' &#125; console.log(data) res.send(data) res.end()&#125;) 在服务器中对返回信息的请求头进行了设置。 最终的结果为： CORS 中属性的分析Access-Control-Allow-Origin The origin parameter specifies a URI that may access the resource. The browser must enforce this. For requests without credentials, the server may specify “*” as a wildcard, thereby allowing any origin to access the resource. Access-Control-Allow-Methods Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request. The conditions under which a request is preflighted are discussed above. Access-Control-Allow-Headers Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request.CORS 与 JSONP 的对比1.CORS 除了 GET 方法外，也支持其它的 HTTP 请求方法如 POST、 PUT 等。 2.CORS 可以使用 XmlHttpRequest 进行传输，所以它的错误处理方式比 JSONP 好。 3.JSONP 可以在不支持 CORS 的老旧浏览器上运作。 一些其它的跨域调用方式window.namewindow对象有个name属性，该属性有个特征：即在一个窗口 (window) 的生命周期内，窗口载入的所有的页面都是共享一个 window.name 的，每个页面对 window.name 都有读写的权限，window.name 是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。 window.postMessage()这个方法是 HTML5 的一个新特性，可以用来向其他所有的 window 对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送 MessageEvent，如果在函数执行的过程中调用了他，就会让后面的函数超时无法执行。 参考：https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kalanliao.github.io/categories/JavaScript/"}],"tags":[{"name":"js","slug":"js","permalink":"https://kalanliao.github.io/tags/js/"}]},{"title":".NetCore3.0预览","slug":"netcore/netcore3.0_preview","date":"2019-09-17T08:55:49.000Z","updated":"2019-09-23T01:55:40.774Z","comments":true,"path":"2019/09/17/netcore/netcore3.0_preview/","link":"","permalink":"https://kalanliao.github.io/2019/09/17/netcore/netcore3.0_preview/","excerpt":"","text":".NET Core 3.0 正式发布将在.NET Conf 上发布，.NET Conf 时间是9月23日至25日。 Visual Studio 2019 16.3预览版3和Visual Studio for Mac 8.3支持.NET Core 3.0 ，这些版本也同时发布。 从.NET Core 3.0 Preview 7就可用于生产，目前dotnet官网就是使用 https://dotnet.microsoft.com/ Powered by .NET Core 3.0.0-preview9-19423-09。 博客园也升级为.NET Core 3.0 Preview 8，目前运行算是良好。 下面实际体验.NET Core 3.0 新特性。 .NET Core 3.0System.Text.Json1234567891011121314public class Person&#123; public string FirstName &#123; get; set; &#125; public string LastName &#123; get; set; &#125; public DateTime? BirthDay &#123; get; set; &#125;&#125;//转成对象string json = ...Person person = JsonSerializer.Parse&lt;Person&gt;(json);//转成json字符串Person person = ...string json = JsonSerializer.ToString(person); .NET Standard 2.1要以.NET Standard 2.1为目标，必须编辑项目文件并将TargetFramework属性更改为netstandard2.1： .NET Framework不支持.NET Standard 2.1。 12345&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netstandard2.1&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt;&lt;/Project&gt; Microsoft.Data.SqlClientMicrosoft.Data.SqlClient是Microsoft Sql Server的数据提供程序。 它是两个System.Data.SqlClient组件的联合体，独立存在于.NET Framework和.NET Core中。 最新版本安装 Install-Package Microsoft.Data.SqlClient https://github.com/dotnet/SqlClient 发布成单个程序dotnet publish -r win10-x64 /p:PublishSingleFile=true Alpine Docker images.NET Core and ASP.NET Core on ARM64 docker pull mcr.microsoft.com/dotnet/core/runtime:3.0-alpine-arm64v8 docker pull mcr.microsoft.com/dotnet/core/aspnet:3.0-alpine-arm64v8 dotnet-counters安装 ： dotnet tool install –global dotnet-counters –version 3.0.0-preview8.19412.1 使用示例： 显示所有信息 dotnet-counters monitor –process-id 1902 System.Runtime 显示CPU使用 GC 及异常数 dotnet-counters monitor –process-id 1902 System.Runtime[cpu-usage,gc-heap-size,exception-count] 官方文档：https://github.com/dotnet/diagnostics/blob/master/documentation/dotnet-counters-instructions.md ReadyToRun你可以通过将应用程序集编译为ReadyToRun（R2R）格式来缩短.NET Core应用程序的启动时间。R2R是一种提前（AOT）编译的形式。 示例提升： 仅限IL的应用： 启动时间：1.9秒内存使用量：69.1 MB应用程序大小：150 MB使用ReadyToRun图像： 启动时间：1.3秒。内存使用量：55.7 MB应用程序大小：156 MB要启用ReadyToRun编译 需要以下操作： 将PublishReadyToRun属性设置为true。 使用显式发布RuntimeIdentifier。 1234567&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt; &lt;PublishReadyToRun&gt;true&lt;/PublishReadyToRun&gt; &lt;/PropertyGroup&gt;&lt;/Project&gt; dotnet publish -r win-x64 -c Release ReadyToRun编译器目前不支持交叉定位。需要在给定目标上进行编译。例如，如果想要Windows x64的R2R程序，则需要在该环境中运行publish命令。 IL linker使用IL linker 可以将程序大小从大约68MB减少到大约28MB dotnet publish -r win10-x64 -c Release /p:PublishTrimmed=true /p:PublishSingleFile=true HttpClient支持HTTP/2123456789101112var client = new HttpClient() &#123; BaseAddress = new Uri(\"https://localhost:5001\") &#125;;// HTTP/1.1 requestusing (var response = await client.GetAsync(\"/\"))&#123; Console.WriteLine(response.Content);&#125;// HTTP/2 requestusing (var request = new HttpRequestMessage(HttpMethod.Get, \"/\") &#123; Version = new Version(2, 0) &#125;)using (var response = await client.SendAsync(request))&#123; Console.WriteLine(response.Content);&#125; ASP.NET Core 3.0ASP.NET Core 3.0中主要更新还是Blazor和gRPC BlazorBlazor 是一个用于使用 .NET 生成交互式客户端 Web UI 的框架： 使用 C# 代替 JavaScript 来创建丰富的交互式 UI。 共享使用 .NET 编写的服务器端和客户端应用逻辑。 将 UI 呈现为 HTML 和 CSS，以支持众多浏览器，其中包括移动浏览器。 使用 .NET 进行客户端 Web 开发可提供以下优势： 使用 C# 代替 JavaScript 来编写代码。 利用现有的 .NET 库生态系统。 在服务器和客户端之间共享应用逻辑。 受益于 .NET 的性能、可靠性和安全性。 始终高效支持 Windows、Linux 和 macOS 上的 Visual Studio。 以一组稳定、功能丰富且易用的通用语言、框架和工具为基础来进行生成。 Blazor 应用基于组件 。 Blazor 中的组件是指 UI 元素，例如，页面、对话框或数据输入窗体。 组件类通常以 Razor 标记页（文件扩展名为 .razor ）的形式编写。 Blazor 中的组件有时被称为 Razor 组件 。 Razor 标记演示组件： 1234567891011121314151617&lt;div&gt; &lt;h1&gt;@Title&lt;/h1&gt; @ChildContent &lt;button @onclick=\"OnYes\"&gt;Yes!&lt;/button&gt;&lt;/div&gt;@code &#123; [Parameter] public string Title &#123; get; set; &#125; [Parameter] public RenderFragment ChildContent &#123; get; set; &#125; private void OnYes() &#123; Console.WriteLine(\"Write to the console in C#! 'Yes' button was selected.From LineZero\"); &#125; 对话框的正文内容 (ChildContent) 和标题 (Title) 由在其 UI 中使用此组件的组件提供。 OnYes 是由按钮的 onclick 事件触发的 C# 方法。 Blazor 使用 UI 构成的自然 HTML 标记。 HTML 元素指定组件，并且标记的特性将值传递给组件的属性。 在以下示例中，Index 组件中使用上面的 Dialog 组件。 1234567@page \"/\"&lt;h1&gt;Hello, world!&lt;/h1&gt;Welcome to your new app.&lt;Dialog Title=\"Blazor\"&gt; Do you want to &lt;i&gt;learn more&lt;/i&gt; about Blazor? From LineZero&lt;/Dialog&gt; 更多官方介绍：https://docs.microsoft.com/zh-cn/aspnet/core/blazor/get-started?view=aspnetcore-3.0&amp;tabs=visual-studio gRPCgRPC 的主要优点是： 现代高性能轻量级 RPC 框架。 协定优先 API 开发，默认使用协议缓冲区，允许与语言无关的实现。 可用于多种语言的工具，以生成强类型服务器和客户端。 支持客户端、服务器和双向流式处理调用。 使用 Protobuf 二进制序列化减少对网络的使用。 这些优点使 gRPC 适用于： 效率至关重要的轻量级微服务。 需要多种语言用于开发的 Polyglot 系统。 需要处理流式处理请求或响应的点对点实时服务。 虽然 C# 实现目前在官方 gRPC 上有介绍，但当前实现依赖于用 C (gRPC C-core) 编写的本机库。 目前正在基于 Kestrel HTTP 服务器和完全托管的 ASP.NET Core 实现gRPC。","categories":[{"name":".NetCore","slug":"NetCore","permalink":"https://kalanliao.github.io/categories/NetCore/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://kalanliao.github.io/tags/C/"},{"name":"NetCore","slug":"NetCore","permalink":"https://kalanliao.github.io/tags/NetCore/"}]},{"title":"javascript学习-01(Console)","slug":"javascript/javascript-study-01","date":"2019-09-17T06:55:49.000Z","updated":"2019-09-19T02:34:06.002Z","comments":true,"path":"2019/09/17/javascript/javascript-study-01/","link":"","permalink":"https://kalanliao.github.io/2019/09/17/javascript/javascript-study-01/","excerpt":"","text":"Console我们经常会在浏览器中使用console.log来进行调试和参数的输出查看，但是console其实是一个非常丰富的封装，其中还有很多的方法，今天就来介绍一下。首先，我们先看一下console的代码 下面就介绍一下，我们会用到的可以提高我们开发效率，调试效率的方法。 console.log()123456//平时我们使用的时候会这样console.log(\"测试内容不要当真\");//或者这样console.log(1,2,3,4)//或者这样console.log(&#123;name:1&#125;) 上面我们使用的格式为console.log(object),console.log(object, otherObject, string)除了这些基础用法还有比较好玩的用法console.log(msg, values),这个格式的用法有点像C++的printf,C#的Console.Write()等那么我们来看看怎么使用 12345//首先我们使用了3种占位符console.log(\"我今天吃了%o,你吃了%d顿,你叫%s.\", \"Skittles\", 22,\"Kalan\");//%o的复杂传值console.log(\"abc %o\",&#123;name:1&#125;) 我们看一下效果可以看到%o这个是对象占位符,%s这个是字符串占位符,%d这个是数字占位符 下面我们讲解一个更好玩的占位符%c，先上代码 1234console.log( \"我爱你 %c路西\" one day, \"color: Red; background-color: orange; padding: 2px 5px; border-radius: 2px\"); 看到这里，应该明白，这个占位符当你使用之后，后面所有的文字都将根据此CSS渲染%o除外 console.dir()123//直接上例子console.dir(document.getElementsByClassName(\"full\")[0])console.log(document.getElementsByClassName(\"full\")[0]) 我们看到结果console.log直接输出的html，而console.dir输出的是DOM结构树对象 console.warn()这个函数直接会输出一个警告框，可以定位到输出位置 console.table()这个函数能更好的显示列表型数据，我们用console.log显示对比一下 12console.table([1,2,3],[2,3,4])console.table(&#123;name:1,age:2&#125;,&#123;name:11,age:22&#125;,&#123;name:11,age:22&#125;) console.assert() 可以传递2个参数：如果为false会输出Assertion failed和第二个参数（如上图所示） console.countcount只是作为一个计数器，或者作为一个命名计数器，可以统计代码被执行的次数。 1234567891011for (let i = 0; i &lt; 10000; i++) &#123; if (i % 2) &#123; console.count(\"odds\"); &#125; if (!(i % 5)) &#123; console.count(\"multiplesOfFive\"); &#125; if (isPrime(i)) &#123; console.count(\"prime\"); &#125;&#125; console.trace()trace 可以调试模块之间的调用 1234567891011export default class CupcakeService &#123; constructor(dataLib) &#123; this.dataLib = dataLib; if(typeof dataLib !== 'object') &#123; console.log(dataLib); console.trace(); &#125; &#125; ...&#125; 这里使用 console.log()仅告诉我们传递数据dataLib是什么 ，而没有具体的传递的路径。不过，console.trace()会非常清楚地告诉我们问题出在 Dashboard.js，我们可以看到是 new CupcakeService(false)导致错误。 console.time()console.time() 是一个用于跟踪操作时间的专用函数，它是跟踪 JavaScript 执行时间的好方法。 123456789101112131415function slowFunction(number) &#123; var functionTimerStart = new Date().getTime(); // something slow or complex with the numbers. // Factorials, or whatever. var functionTime = new Date().getTime() - functionTimerStart; console.log(`Function time: $&#123;functionTime&#125;`);&#125;var start = new Date().getTime();for (i = 0; i &lt; 100000; ++i) &#123; slowFunction(i);&#125;var time = new Date().getTime() - start;console.log(`Execution time: $&#123;time&#125;`); 这是一种老派的做法，我们使用 console.time()来简化以上代码。 123456789101112const slowFunction = number =&gt; &#123; console.time(\"slowFunction\"); // something slow or complex with the numbers. // Factorials, or whatever. console.timeEnd(\"slowFunction\");&#125;;console.time();for (i = 0; i &lt; 100000; ++i) &#123; slowFunction(i);&#125;console.timeEnd(); console.group()12345678910111213// this is the global scopelet number = 1;console.group(\"OutsideLoop\");console.log(number);console.group(\"Loop\");for (let i = 0; i &lt; 5; i++) &#123; number = i + number; console.log(number);&#125;console.groupEnd();console.log(number);console.groupEnd();console.log(\"All done now\"); 输出如下： 123456789101112131415161718class MyClass &#123; constructor(dataAccess) &#123; console.group(\"Constructor\"); console.log(\"Constructor executed\"); console.assert( typeof dataAccess === \"object\", \"Potentially incorrect dataAccess object\" ); this.initializeEvents(); console.groupEnd(); &#125; initializeEvents() &#123; console.group(\"events\"); console.log(\"Initialising events\"); console.groupEnd(); &#125;&#125;let myClass = new MyClass(false);","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kalanliao.github.io/categories/JavaScript/"}],"tags":[{"name":"js","slug":"js","permalink":"https://kalanliao.github.io/tags/js/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-09-17T03:13:05.858Z","updated":"2019-09-17T05:38:34.554Z","comments":true,"path":"2019/09/17/hello-world/","link":"","permalink":"https://kalanliao.github.io/2019/09/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"测试","slug":"测试","permalink":"https://kalanliao.github.io/categories/测试/"}],"tags":[]}]}