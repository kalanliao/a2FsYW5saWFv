<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>.NetCore3.0预览</title>
      <link href="/2019/09/17/netcore/netcore3.0_preview/"/>
      <url>/2019/09/17/netcore/netcore3.0_preview/</url>
      
        <content type="html"><![CDATA[<p>.NET Core 3.0 正式发布将在.NET Conf 上发布，.NET Conf 时间是9月23日至25日。</p><p>Visual Studio 2019 16.3预览版3和Visual Studio for Mac 8.3支持.NET Core 3.0 ，这些版本也同时发布。</p><p>从.NET Core 3.0 Preview 7就可用于生产，目前dotnet官网就是使用 <a href="https://dotnet.microsoft.com/" target="_blank" rel="noopener">https://dotnet.microsoft.com/</a> Powered by .NET Core 3.0.0-preview9-19423-09。</p><p>博客园也升级为.NET Core 3.0 Preview 8，目前运行算是良好。</p><p>下面实际体验.NET Core 3.0 新特性。</p><h1 id="NET-Core-3-0"><a href="#NET-Core-3-0" class="headerlink" title=".NET Core 3.0"></a>.NET Core 3.0</h1><h2 id="System-Text-Json"><a href="#System-Text-Json" class="headerlink" title="System.Text.Json"></a>System.Text.Json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Person</span><br><span class="line">&#123;</span><br><span class="line">    public string FirstName &#123; get; set; &#125;</span><br><span class="line">    public string LastName &#123; get; set; &#125;</span><br><span class="line">    public DateTime? BirthDay &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//转成对象</span><br><span class="line">string json = ...</span><br><span class="line">Person person = JsonSerializer.Parse&lt;Person&gt;(json);</span><br><span class="line"></span><br><span class="line">//转成json字符串</span><br><span class="line">Person person = ...</span><br><span class="line">string json = JsonSerializer.ToString(person);</span><br></pre></td></tr></table></figure><h2 id="NET-Standard-2-1"><a href="#NET-Standard-2-1" class="headerlink" title=".NET Standard 2.1"></a>.NET Standard 2.1</h2><p>要以.NET Standard 2.1为目标，必须编辑项目文件并将TargetFramework属性更改为netstandard2.1： .NET Framework不支持.NET Standard 2.1。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netstandard2.1<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Microsoft-Data-SqlClient"><a href="#Microsoft-Data-SqlClient" class="headerlink" title="Microsoft.Data.SqlClient"></a>Microsoft.Data.SqlClient</h2><p>Microsoft.Data.SqlClient是Microsoft Sql Server的数据提供程序。</p><p>它是两个System.Data.SqlClient组件的联合体，独立存在于.NET Framework和.NET Core中。</p><p>最新版本安装</p><p><code>Install-Package Microsoft.Data.SqlClient</code></p><p><code>https://github.com/dotnet/SqlClient</code></p><h2 id="发布成单个程序"><a href="#发布成单个程序" class="headerlink" title="发布成单个程序"></a>发布成单个程序</h2><p><code>dotnet publish -r win10-x64 /p:PublishSingleFile=true</code></p><h2 id="Alpine-Docker-images"><a href="#Alpine-Docker-images" class="headerlink" title="Alpine Docker images"></a>Alpine Docker images</h2><p><code>.NET Core and ASP.NET Core on ARM64</code></p><p><code>docker pull mcr.microsoft.com/dotnet/core/runtime:3.0-alpine-arm64v8</code></p><p><code>docker pull mcr.microsoft.com/dotnet/core/aspnet:3.0-alpine-arm64v8</code></p><h2 id="dotnet-counters"><a href="#dotnet-counters" class="headerlink" title="dotnet-counters"></a>dotnet-counters</h2><p>安装 ： dotnet tool install –global dotnet-counters –version 3.0.0-preview8.19412.1</p><p>使用示例：</p><p>显示所有信息</p><p>dotnet-counters monitor –process-id 1902 System.Runtime</p><p>显示CPU使用 GC 及异常数</p><p>dotnet-counters monitor –process-id 1902 System.Runtime[cpu-usage,gc-heap-size,exception-count]</p><p>官方文档：<a href="https://github.com/dotnet/diagnostics/blob/master/documentation/dotnet-counters-instructions.md" target="_blank" rel="noopener">https://github.com/dotnet/diagnostics/blob/master/documentation/dotnet-counters-instructions.md</a></p><h2 id="ReadyToRun"><a href="#ReadyToRun" class="headerlink" title="ReadyToRun"></a>ReadyToRun</h2><p>你可以通过将应用程序集编译为ReadyToRun（R2R）格式来缩短.NET Core应用程序的启动时间。R2R是一种提前（AOT）编译的形式。</p><p>示例提升：</p><p>仅限IL的应用：</p><p>启动时间：1.9秒<br>内存使用量：69.1 MB<br>应用程序大小：150 MB<br>使用ReadyToRun图像：</p><p>启动时间：1.3秒。<br>内存使用量：55.7 MB<br>应用程序大小：156 MB<br>要启用ReadyToRun编译 需要以下操作：</p><p>将PublishReadyToRun属性设置为true。 使用显式发布RuntimeIdentifier。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Exe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp3.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PublishReadyToRun</span>&gt;</span>true<span class="tag">&lt;/<span class="name">PublishReadyToRun</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dotnet publish -r win-x64 -c Release</p><p>ReadyToRun编译器目前不支持交叉定位。需要在给定目标上进行编译。例如，如果想要Windows x64的R2R程序，则需要在该环境中运行publish命令。</p><h2 id="IL-linker"><a href="#IL-linker" class="headerlink" title="IL linker"></a>IL linker</h2><p>使用IL linker 可以将程序大小从大约68MB减少到大约28MB</p><p>dotnet publish -r win10-x64 -c Release /p:PublishTrimmed=true /p:PublishSingleFile=true</p><h2 id="HttpClient支持HTTP-2"><a href="#HttpClient支持HTTP-2" class="headerlink" title="HttpClient支持HTTP/2"></a>HttpClient支持HTTP/2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var client = new HttpClient() &#123; BaseAddress = new Uri(&quot;https://localhost:5001&quot;) &#125;;</span><br><span class="line">// HTTP/1.1 request</span><br><span class="line">using (var response = await client.GetAsync(&quot;/&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(response.Content);</span><br><span class="line">&#125;</span><br><span class="line">// HTTP/2 request</span><br><span class="line">using (var request = new HttpRequestMessage(HttpMethod.Get, &quot;/&quot;) &#123; Version = new Version(2, 0) &#125;)</span><br><span class="line">using (var response = await client.SendAsync(request))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(response.Content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ASP-NET-Core-3-0"><a href="#ASP-NET-Core-3-0" class="headerlink" title="ASP.NET Core 3.0"></a>ASP.NET Core 3.0</h1><p>ASP.NET Core 3.0中主要更新还是Blazor和gRPC</p><h2 id="Blazor"><a href="#Blazor" class="headerlink" title="Blazor"></a>Blazor</h2><p>Blazor 是一个用于使用 .NET 生成交互式客户端 Web UI 的框架：</p><p>使用 C# 代替 JavaScript 来创建丰富的交互式 UI。</p><p>共享使用 .NET 编写的服务器端和客户端应用逻辑。</p><p>将 UI 呈现为 HTML 和 CSS，以支持众多浏览器，其中包括移动浏览器。</p><p>使用 .NET 进行客户端 Web 开发可提供以下优势：</p><p>使用 C# 代替 JavaScript 来编写代码。</p><p>利用现有的 .NET 库生态系统。</p><p>在服务器和客户端之间共享应用逻辑。</p><p>受益于 .NET 的性能、可靠性和安全性。</p><p>始终高效支持 Windows、Linux 和 macOS 上的 Visual Studio。</p><p>以一组稳定、功能丰富且易用的通用语言、框架和工具为基础来进行生成。</p><p>Blazor 应用基于组件 。 Blazor 中的组件是指 UI 元素，例如，页面、对话框或数据输入窗体。</p><p>组件类通常以 Razor 标记页（文件扩展名为 .razor ）的形式编写。 Blazor 中的组件有时被称为 Razor 组件 。</p><p>Razor 标记演示组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;@Title&lt;/h1&gt;</span><br><span class="line">    @ChildContent</span><br><span class="line">    &lt;button @onclick=&quot;OnYes&quot;&gt;Yes!&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [Parameter]</span><br><span class="line">    public string Title &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    [Parameter]</span><br><span class="line">    public RenderFragment ChildContent &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    private void OnYes()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;Write to the console in C#! &apos;Yes&apos; button was selected.From LineZero&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对话框的正文内容 (ChildContent) 和标题 (Title) 由在其 UI 中使用此组件的组件提供。 OnYes 是由按钮的 onclick 事件触发的 C# 方法。</p><p>Blazor 使用 UI 构成的自然 HTML 标记。 HTML 元素指定组件，并且标记的特性将值传递给组件的属性。</p><p>在以下示例中，Index 组件中使用上面的 Dialog 组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@page &quot;/&quot;</span><br><span class="line">&lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">Welcome to your new app.</span><br><span class="line">&lt;Dialog Title=&quot;Blazor&quot;&gt;</span><br><span class="line">    Do you want to &lt;i&gt;learn more&lt;/i&gt; about Blazor?</span><br><span class="line">　　 From LineZero</span><br><span class="line">&lt;/Dialog&gt;</span><br></pre></td></tr></table></figure><p>更多官方介绍：<a href="https://docs.microsoft.com/zh-cn/aspnet/core/blazor/get-started?view=aspnetcore-3.0&amp;tabs=visual-studio" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/aspnet/core/blazor/get-started?view=aspnetcore-3.0&amp;tabs=visual-studio</a></p><h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><p>gRPC 的主要优点是：</p><p>现代高性能轻量级 RPC 框架。</p><p>协定优先 API 开发，默认使用协议缓冲区，允许与语言无关的实现。</p><p>可用于多种语言的工具，以生成强类型服务器和客户端。</p><p>支持客户端、服务器和双向流式处理调用。</p><p>使用 Protobuf 二进制序列化减少对网络的使用。</p><p>这些优点使 gRPC 适用于：</p><p>效率至关重要的轻量级微服务。</p><p>需要多种语言用于开发的 Polyglot 系统。</p><p>需要处理流式处理请求或响应的点对点实时服务。</p><p>虽然 C# 实现目前在官方 gRPC 上有介绍，但当前实现依赖于用 C (gRPC C-core) 编写的本机库。 </p><p>目前正在基于 Kestrel HTTP 服务器和完全托管的 ASP.NET Core 实现gRPC。</p>]]></content>
      
      
      <categories>
          
          <category> .NetCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#,.netcore,.netcore3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript学习-01(Console)</title>
      <link href="/2019/09/17/javascript/javascript-study-01/"/>
      <url>/2019/09/17/javascript/javascript-study-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h1><p>我们经常会在浏览器中使用<code>console.log</code>来进行调试和参数的输出查看，但是<code>console</code>其实是一个非常丰富的封装，其中还有很多的方法，今天就来介绍一下。<br>首先，我们先看一下<code>console</code>的代码<br><img src="/images/javascript-study-01/11738664-81199621a81286e1.png" alt="console结构"></p><p>下面就介绍一下，我们会用到的可以提高我们开发效率，调试效率的方法。</p><h2 id="console-log"><a href="#console-log" class="headerlink" title="console.log()"></a>console.log()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平时我们使用的时候会这样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"测试内容不要当真"</span>);</span><br><span class="line"><span class="comment">//或者这样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">//或者这样</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>上面我们使用的格式为<code>console.log(object)</code>,<code>console.log(object, otherObject, string)</code><br>除了这些基础用法还有比较好玩的用法<br><code>console.log(msg, values)</code>,这个格式的用法有点像C++的printf,C#的Console.Write()等<br>那么我们来看看怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先我们使用了3种占位符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我今天吃了%o,你吃了%d顿,你叫%s."</span>, <span class="string">"Skittles"</span>, <span class="number">22</span>,<span class="string">"Kalan"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//%o的复杂传值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc %o"</span>,&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/javascript-study-01/11738664-e16ae0b53ee2ce75.png" alt="效果"><br><img src="/images/javascript-study-01/11738664-88655740385f9fa7.png" alt="效果2"></p><p>我们看一下效果<br>可以看到<code>%o</code>这个是对象占位符,<code>%s</code>这个是字符串占位符,<code>%d</code>这个是数字占位符</p><p>下面我们讲解一个更好玩的占位符<code>%c</code>，先上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">"我爱你 %c路西"</span> one day,</span><br><span class="line">    <span class="string">"color: Red; background-color: orange; padding: 2px 5px; border-radius: 2px"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="/images/javascript-study-01/11738664-22c5e6cdc4c19285.png" alt="图片.png"><br>看到这里，应该明白，这个占位符当你使用之后，后面所有的文字都将根据此CSS渲染<code>%o</code>除外</p><h2 id="console-dir"><a href="#console-dir" class="headerlink" title="console.dir()"></a>console.dir()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接上例子</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>.getElementsByClassName(<span class="string">"full"</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">"full"</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/javascript-study-01/11738664-b3afca936115d49a.png" alt="结果"><br><img src="/images/javascript-study-01/11738664-23a8511207cf4d93.png" alt="图片.png"></p><p>我们看到结果<code>console.log</code>直接输出的html，而<code>console.dir</code>输出的是DOM结构树对象</p><h2 id="console-warn"><a href="#console-warn" class="headerlink" title="console.warn()"></a>console.warn()</h2><p><img src="/images/javascript-study-01/11738664-cd3f0ab443607aaf.png" alt="图片.png"><br>这个函数直接会输出一个警告框，可以定位到输出位置</p><h2 id="console-table"><a href="#console-table" class="headerlink" title="console.table()"></a>console.table()</h2><p>这个函数能更好的显示列表型数据，我们用<code>console.log</code>显示对比一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">console</span>.table(&#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">age</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">name</span>:<span class="number">11</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;,&#123;<span class="attr">name</span>:<span class="number">11</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/javascript-study-01/11738664-02ccb6c6f99fb7c8.png" alt="对比图"></p><p><img src="/images/javascript-study-01/11738664-8058b1115fd0b077.png" alt="图片.png"></p><h2 id="console-assert"><a href="#console-assert" class="headerlink" title="console.assert()"></a>console.assert()</h2><p><img src="/images/javascript-study-01/11738664-bba5aca58df2db11.png" alt="图片.png"></p><p><img src="/images/javascript-study-01/11738664-39beb2a9e381b456.png" alt="图片.png"></p><p>可以传递2个参数：如果为false会输出<code>Assertion failed</code>和第二个参数（如上图所示）</p><h2 id="console-count"><a href="#console-count" class="headerlink" title="console.count"></a>console.count</h2><p><code>count</code>只是作为一个计数器，或者作为一个命名计数器，可以统计代码被执行的次数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.count(<span class="string">"odds"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(i % <span class="number">5</span>)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.count(<span class="string">"multiplesOfFive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isPrime(i)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.count(<span class="string">"prime"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace()"></a>console.trace()</h2><p><code>trace</code> 可以调试模块之间的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CupcakeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(dataLib) &#123;</span><br><span class="line">    <span class="keyword">this</span>.dataLib = dataLib;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> dataLib !== <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(dataLib);</span><br><span class="line">      <span class="built_in">console</span>.trace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用 <code>console.log()</code>仅告诉我们传递数据dataLib是什么 ，而没有具体的传递的路径。不过，<code>console.trace()</code>会非常清楚地告诉我们问题出在 <code>Dashboard.js</code>，我们可以看到是 <code>new CupcakeService(false)</code>导致错误。</p><h2 id="console-time"><a href="#console-time" class="headerlink" title="console.time()"></a>console.time()</h2><p>console.time() 是一个用于跟踪操作时间的专用函数，它是跟踪 JavaScript 执行时间的好方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slowFunction</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> functionTimerStart = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="comment">// something slow or complex with the numbers.</span></span><br><span class="line">    <span class="comment">// Factorials, or whatever.</span></span><br><span class="line">    <span class="keyword">var</span> functionTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - functionTimerStart;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Function time: <span class="subst">$&#123;functionTime&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++i) &#123;</span><br><span class="line">    slowFunction(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Execution time: <span class="subst">$&#123;time&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>这是一种老派的做法，我们使用 <code>console.time()</code>来简化以上代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slowFunction = <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">"slowFunction"</span>);</span><br><span class="line">    <span class="comment">// something slow or complex with the numbers.</span></span><br><span class="line">    <span class="comment">// Factorials, or whatever.</span></span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">"slowFunction"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.time();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++i) &#123;</span><br><span class="line">    slowFunction(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd();</span><br></pre></td></tr></table></figure><h2 id="console-group"><a href="#console-group" class="headerlink" title="console.group()"></a>console.group()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is the global scope</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">"OutsideLoop"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">"Loop"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    number = i + number;</span><br><span class="line">    <span class="built_in">console</span>.log(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"All done now"</span>);</span><br></pre></td></tr></table></figure><p>输出如下：</p><p><img src="/images/javascript-study-01/3973862-b82745c286f40c52.png" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(dataAccess) &#123;</span><br><span class="line">        <span class="built_in">console</span>.group(<span class="string">"Constructor"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Constructor executed"</span>);</span><br><span class="line">        <span class="built_in">console</span>.assert(</span><br><span class="line">            <span class="keyword">typeof</span> dataAccess === <span class="string">"object"</span>,</span><br><span class="line">            <span class="string">"Potentially incorrect dataAccess object"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.initializeEvents();</span><br><span class="line">        <span class="built_in">console</span>.groupEnd();</span><br><span class="line">    &#125;</span><br><span class="line">    initializeEvents() &#123;</span><br><span class="line">        <span class="built_in">console</span>.group(<span class="string">"events"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Initialising events"</span>);</span><br><span class="line">        <span class="built_in">console</span>.groupEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myClass = <span class="keyword">new</span> MyClass(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/17/hello-world/"/>
      <url>/2019/09/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
